import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { ProjectSchema } from './Projects';
export interface GroupSchema {
    id: number;
    web_url: string;
    name: string;
    path: string;
    description: string;
    visibility: string;
    share_with_group_lock: boolean;
    require_two_factor_authentication: boolean;
    two_factor_grace_period: number;
    project_creation_level: string;
    auto_devops_enabled?: boolean;
    subgroup_creation_level: string;
    emails_disabled?: boolean;
    lfs_enabled: boolean;
    avatar_url: string;
    request_access_enabled: boolean;
    full_name: string;
    full_path: string;
    parent_id?: number;
}
export interface GroupDetailSchema extends GroupSchema {
    projects: ProjectSchema[];
    shared_projects: ProjectSchema[];
    runners_token: string;
}
export declare class Groups extends BaseService {
    all(options?: PaginatedRequestOptions): Promise<GroupSchema[]>;
    create(options?: BaseRequestOptions): Promise<object>;
    createLDAPLink(groupId: string | number, cn: any, groupAccess: any, provider: string, options?: Sudo): Promise<object>;
    edit(groupId: string | number, options?: BaseRequestOptions): Promise<object>;
    projects(groupId: string | number, options?: BaseRequestOptions): Promise<ProjectSchema[]>;
    remove(groupId: string | number, options?: Sudo): Promise<object>;
    removeLDAPLink(groupId: string | number, cn: any, { provider, ...options }?: Sudo & {
        provider?: string;
    }): Promise<object>;
    search(nameOrPath: string, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    show(groupId: string | number, options?: BaseRequestOptions): Promise<GroupDetailSchema>;
    subgroups(groupId: string | number, options?: PaginatedRequestOptions): Promise<GroupDetailSchema[]>;
    syncLDAP(groupId: string | number, options?: Sudo): Promise<object>;
}
