import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { EventOptions } from './Events';
import { GroupSchema } from './Groups';
import { UploadMetadata } from './ProjectImportExport';
import { UserSchema } from './Users';
export interface NamespaceInfoSchema {
    id: number;
    name: string;
    path: string;
    kind: string;
    full_path: string;
    parent_id?: number;
    avatar_url: string;
    web_url: string;
}
export interface ProjectSchema {
    id: number;
    description: string;
    name: string;
    name_with_namespace: string;
    path: string;
    path_with_namespace: string;
    created_at: Date;
    default_branch: string;
    tag_list: string[];
    ssh_url_to_repo: string;
    http_url_to_repo: string;
    web_url: string;
    readme_url: string;
    avatar_url: string;
    star_count: number;
    forks_count: number;
    last_activity_at: Date;
    empty_repo: boolean;
    archived: boolean;
    visibility: string;
    resolve_outdated_diff_discussions: boolean;
    container_registry_enabled: boolean;
    issues_enabled: boolean;
    merge_requests_enabled: boolean;
    wiki_enabled: boolean;
    jobs_enabled: boolean;
    snippets_enabled: boolean;
    issues_access_level: string;
    repository_access_level: string;
    merge_requests_access_level: string;
    wiki_access_level: string;
    builds_access_level: string;
    snippets_access_level: string;
    shared_runners_enabled: boolean;
    lfs_enabled: boolean;
    creator_id: number;
    import_status: string;
    open_issues_count: number;
    ci_default_git_depth: number;
    build_timeout: number;
    public_jobs: boolean;
    auto_cancel_pending_pipelines?: string;
    build_coverage_regex?: string;
    ci_config_path?: string;
    shared_with_groups: GroupSchema[];
    only_allow_merge_if_pipeline_succeeds: boolean;
    request_access_enabled: boolean;
    only_allow_merge_if_all_discussions_are_resolved: boolean;
    remove_source_branch_after_merge: boolean;
    printing_merge_request_link_enabled: boolean;
    merge_method: string;
    auto_devops_enabled: boolean;
    auto_devops_deploy_strategy: string;
    namespace: NamespaceInfoSchema;
    owner: UserSchema;
}
export declare class Projects extends BaseService {
    all(options?: PaginatedRequestOptions): Promise<ProjectSchema[]>;
    archive(projectId: string | number, options?: Sudo): Promise<object>;
    create({ userId, ...options }: {
        userId?: number;
    } & BaseRequestOptions): Promise<object>;
    edit(projectId: string | number, options?: BaseRequestOptions): Promise<object>;
    events(projectId: string | number, options?: BaseRequestOptions & EventOptions): Promise<import("../infrastructure").GetResponse>;
    fork(projectId: string | number, { forkedFromId, ...options }?: {
        forkedFromId?: number;
    } & BaseRequestOptions): Promise<object>;
    forks(projectId: string | number, options?: BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    languages(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    mirrorPull(projectId: string | number, options?: Sudo): Promise<object>;
    remove(projectId: string | number, options?: Sudo): Promise<object>;
    removeFork(projectId: string | number, options?: Sudo): Promise<object>;
    search(projectName: string): Promise<import("../infrastructure").GetResponse>;
    share(projectId: string | number, groupId: string | number, groupAccess: number, options?: BaseRequestOptions): Promise<object>;
    show(projectId: string | number, options?: BaseRequestOptions): Promise<ProjectSchema>;
    star(projectId: string | number, options?: Sudo): Promise<object>;
    statuses(projectId: string | number, sha: string, state: string, options?: BaseRequestOptions): Promise<object>;
    transfer(projectId: string | number, namespaceId: string | number): Promise<object>;
    unarchive(projectId: string | number, options?: Sudo): Promise<object>;
    unshare(projectId: string | number, groupId: string | number, options?: Sudo): Promise<object>;
    unstar(projectId: string | number, options?: Sudo): Promise<object>;
    upload(projectId: any, content: any, { metadata, sudo }?: {
        metadata?: UploadMetadata;
    } & Sudo): Promise<object>;
}
