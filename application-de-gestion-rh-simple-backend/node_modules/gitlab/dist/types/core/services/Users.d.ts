import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { EventOptions } from './Events';
export interface UserSchema {
    id: number;
    name: string;
    username: string;
    state: string;
    avatar_url: string;
    web_url: string;
}
export interface UserDetailSchema extends UserSchema {
    created_at: Date;
    bio?: string;
    location?: string;
    public_email: string;
    skype: string;
    linkedin: string;
    twitter: string;
    website_url?: string;
    organization?: string;
}
export declare class Users extends BaseService {
    all(options?: PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    activities(options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    projects(userId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    block(userId: number, options?: Sudo): Promise<object>;
    create(options?: BaseRequestOptions): Promise<object>;
    current(options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    edit(userId: number, options?: BaseRequestOptions): Promise<object>;
    events(userId: number, options?: BaseRequestOptions & EventOptions): Promise<import("../infrastructure").GetResponse>;
    search(emailOrUsername: string, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    show(userId: number, options?: BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    remove(userId: number, options?: Sudo): Promise<object>;
    unblock(userId: number, options?: Sudo): Promise<object>;
}
