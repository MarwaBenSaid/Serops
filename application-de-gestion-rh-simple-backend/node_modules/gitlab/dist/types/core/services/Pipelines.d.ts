import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { JobScope } from './Jobs';
export interface PipelineSchema {
    id: number;
    sha: string;
    ref: string;
    status: string;
    created_at: Date;
    updated_at: Date;
    web_url: string;
}
export declare class Pipelines extends BaseService {
    all(projectId: string | number, options?: PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    create(projectId: string | number, ref: string, options?: BaseRequestOptions): Promise<object>;
    delete(projectId: string | number, pipelineId: number, options?: Sudo): Promise<object>;
    show(projectId: string | number, pipelineId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    retry(projectId: string | number, pipelineId: number, options?: Sudo): Promise<object>;
    cancel(projectId: string | number, pipelineId: number, options?: Sudo): Promise<object>;
    showJobs(projectId: string | number, pipelineId: number, options?: {
        scope: JobScope;
    } & Sudo): Promise<import("../infrastructure").GetResponse>;
    allVariables(projectId: string | number, pipelineId: number, options?: PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
}
