import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
export interface AcceptMergeRequestOptions {
    merge_commit_message?: string;
    squash_commit_message?: string;
    squash?: boolean;
    should_remove_source_branch?: boolean;
    merge_when_pipeline_succeeds?: boolean;
    sha?: string;
}
export interface ShowMergeRequestOptions {
    render_html?: boolean;
    include_diverged_commits_count?: true;
    include_rebase_in_progress?: boolean;
}
export interface CreateMergeRequestOptions {
    assignee_id?: number;
    description?: string;
    target_project_id?: number;
    labels?: string;
    milestone_id?: number;
    remove_source_branch?: boolean;
    allow_collaboration?: boolean;
    allow_maintainer_to_push?: boolean;
    squash?: boolean;
}
export interface UpdateMergeRequestOptions {
    target_branch?: number;
    title?: string;
    assignee_id?: number;
    milestone_id?: number;
    labels?: string;
    description?: string;
    state_event?: string;
    remove_source_branch?: boolean;
    squash?: boolean;
    discussion_locked?: boolean;
    allow_collaboration?: boolean;
    allow_maintainer_to_push?: boolean;
}
export declare class MergeRequests extends BaseService {
    accept(projectId: string | number, mergerequestIId: number, options?: AcceptMergeRequestOptions & BaseRequestOptions): Promise<object>;
    addSpentTime(projectId: string | number, mergerequestIId: number, duration: string, options?: Sudo): Promise<object>;
    addTimeEstimate(projectId: string | number, mergerequestIId: number, duration: string, options?: Sudo): Promise<object>;
    all({ projectId, groupId, ...options }: ({
        projectId: string | number;
    } | {
        groupId: string | number;
    } | {}) & PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    approve(projectId: string | number, mergerequestIId: number, options?: {
        sha?: string;
    } & BaseRequestOptions): Promise<object>;
    approvals(projectId: string | number, { mergerequestIId, ...options }?: {
        mergerequestIId?: number;
    } & BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    approvalState(projectId: string | number, mergerequestIId: number, options?: {
        sha?: string;
    } & BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    approvers(projectId: string | number, approverIds: number[], approverGroupIds: (string | number)[], { mergerequestIId, ...options }?: {
        mergerequestIId?: number;
    } & BaseRequestOptions): Promise<object>;
    cancelOnPipelineSucess(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<object>;
    changes(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    closesIssues(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    commits(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    create(projectId: string | number, sourceBranch: string, targetBranch: string, title: string, options?: CreateMergeRequestOptions & BaseRequestOptions): Promise<object>;
    edit(projectId: string | number, mergerequestIId: number, options?: UpdateMergeRequestOptions & BaseRequestOptions): Promise<object>;
    editApprovals(projectId: string | number, { mergerequestIId, ...options }?: {
        mergerequestIId?: number;
    } & BaseRequestOptions): Promise<object>;
    participants(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    pipelines(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    remove(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<object>;
    resetSpentTime(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<object>;
    resetTimeEstimate(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<object>;
    show(projectId: string | number, mergerequestIId: number, options?: ShowMergeRequestOptions & BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    timeStats(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    version(projectId: string | number, mergerequestIId: number, versionId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    versions(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    unapprove(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<object>;
    unsubscribe(projectId: string | number, mergerequestIId: number, options?: Sudo): Promise<object>;
}
