import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
export declare class Issues extends BaseService {
    addSpentTime(projectId: string | number, issueId: number, duration: string, options?: Sudo): Promise<object>;
    addTimeEstimate(projectId: string | number, issueId: number, duration: string, options?: Sudo): Promise<object>;
    all({ projectId, groupId, ...options }?: ({
        projectId?: string | number;
    } | {
        groupId?: string | number;
    } | {}) & PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    create(projectId: string | number, options?: BaseRequestOptions): Promise<object>;
    edit(projectId: string | number, issueId: number, options?: BaseRequestOptions): Promise<object>;
    link(projectId: string | number, issueIId: number, targetProjectId: string | number, targetIssueId: number, options?: BaseRequestOptions): Promise<object>;
    participants(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    remove(projectId: string | number, issueId: number, options?: Sudo): Promise<object>;
    resetSpentTime(projectId: string | number, issueId: number, options?: BaseRequestOptions): Promise<object>;
    resetTimeEstimate(projectId: string | number, issueId: number, options?: Sudo): Promise<object>;
    show(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    subscribe(projectId: string | number, issueId: number, options?: Sudo): Promise<object>;
    timeStats(projectId: string | number, issueId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    unsubscribe(projectId: string | number, issueId: number, options?: Sudo): Promise<object>;
}
