import { BaseService, BaseRequestOptions, Sudo } from '../infrastructure';
export interface RepositoryFileSchema {
    file_name: string;
    file_path: string;
    size: number;
    encoding: string;
    content: string;
    content_sha256: string;
    ref: string;
    blob_id: string;
    commit_id: string;
    last_commit_id: string;
}
export declare class RepositoryFiles extends BaseService {
    create(projectId: string | number, filePath: string, branch: string, content: string, commitMessage: string, options?: BaseRequestOptions): Promise<object>;
    edit(projectId: string | number, filePath: string, branch: string, content: string, commitMessage: string, options?: BaseRequestOptions): Promise<object>;
    remove(projectId: string | number, filePath: string, branch: string, commitMessage: string, options?: BaseRequestOptions): Promise<object>;
    show(projectId: string | number, filePath: string, ref: string, options?: Sudo): Promise<RepositoryFileSchema>;
    showBlame(projectId: string | number, filePath: string, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    showRaw(projectId: string | number, filePath: string, ref: string, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
}
