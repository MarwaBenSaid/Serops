import { BaseService } from './BaseService';
export interface Sudo {
    sudo?: string | number;
}
export interface PaginationOptions {
    total: number;
    next: number | null;
    current: number;
    previous: number | null;
    perPage: number;
    totalPages: number;
}
export interface BaseRequestOptions extends Sudo {
    [key: string]: any;
}
export interface PaginatedRequestOptions extends BaseRequestOptions {
    showPagination?: boolean;
    maxPages?: number;
    page?: number;
    perPage?: number;
}
export declare type PaginationResponse = {
    data: object[];
    pagination: PaginationOptions;
};
export declare type GetResponse = PaginationResponse | object | object[];
export declare type PostResponse = object;
export declare type PutResponse = object;
export declare type DelResponse = object;
declare function get(service: BaseService, endpoint: string, options?: PaginatedRequestOptions): Promise<GetResponse>;
declare function stream(service: BaseService, endpoint: string, options?: BaseRequestOptions): any;
declare function post(service: BaseService, endpoint: string, options?: BaseRequestOptions): Promise<PostResponse>;
declare function put(service: BaseService, endpoint: string, options?: BaseRequestOptions): Promise<PutResponse>;
declare function del(service: BaseService, endpoint: string, options?: BaseRequestOptions): Promise<DelResponse>;
export declare const RequestHelper: {
    post: typeof post;
    put: typeof put;
    get: typeof get;
    del: typeof del;
    stream: typeof stream;
};
export {};
