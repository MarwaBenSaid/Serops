export interface Requester {
    get: Function;
    post: Function;
    put: Function;
    delete: Function;
    stream?: Function;
}
export interface BaseServiceOptions {
    oauthToken?: string;
    token?: string;
    jobToken?: string;
    host?: string;
    url?: string;
    version?: 3 | 4;
    rejectUnauthorized?: boolean;
    camelize?: boolean;
    requester?: Requester;
    requestTimeout?: number;
    profileToken?: string;
    sudo?: string | number;
    profileMode?: 'execution' | 'memory';
}
export declare class BaseService {
    readonly url: string;
    readonly requester: Requester;
    readonly requestTimeout: number;
    readonly headers: {
        [header: string]: string;
    };
    readonly camelize: boolean;
    readonly rejectUnauthorized: boolean;
    constructor({ token, jobToken, oauthToken, sudo, profileToken, profileMode, host, url, version, camelize, rejectUnauthorized, requester, requestTimeout, }?: BaseServiceOptions);
}
